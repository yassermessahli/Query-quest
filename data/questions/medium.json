[
   {
      "number": 12,
      "duration": 60,
      "statement": "A data quality team at an e-commerce platform needs to identify and handle price outliers.",
      "task": "Calculate Q1, Q3",
      "expected_output": "Q1: 110\nQ3: 575\n",
      "typical_answer": "Q1 = df['price'].quantile(0.25),\nQ3 = df['price'].quantile(0.75),\n"
   },
   {
      "number": 13,
      "duration": 60,
      "statement": "The data quality team still needs to identify and handle price outliers.",
      "task": "Calculate the IQR for price outlier detection",
      "expected_output": "IQR: 465\n",
      "typical_answer": "IQR = df['price'].quantile(0.75) - df['price'].quantile(0.25)"
   },
   {
      "number": 14,
      "duration": 50,
      "statement": "A financial analyst needs to understand stock price distribution characteristics.",
      "task": "Calculate mean of price distribution",
      "expected_output": "Mean: 150.0",
      "typical_answer": "mean = df['price'].mean()\n"
   },
   {
      "number": 15,
      "duration": 50,
      "statement": "The financial analyst needs to understand stock price distribution characteristics.",
      "task": "Calculate skewness of price distribution",
      "expected_output": "Skewness: 0.75",
      "typical_answer": "skewness': df['price'].skew()"
   },
   {
      "number": 16,
      "duration": 50,
      "statement": "The financial analyst needs to understand stock price distribution characteristics.",
      "task": "Find if the distribution is right-skewed or left skewed",
      "expected_output": "Distribution: right-skewed",
      "typical_answer": "distribution_type = 'right-skewed' if df['price'].skew() > 0 else 'left-skewed'\n}"
   },
   {
      "number": 17,
      "duration": 50,
      "statement": "A bank wants to automate loan approval using machine learning.",
      "task": "First train a dicision tree model",
      "expected_output": "Dicision tree model trained with the given training data.",
      "typical_answer": "DecisionTreeClassifier().fit(X, y)"
   },
   {
      "number": 18,
      "duration": 80,
      "statement": "A bank wants to automate loan approval using machine learning.",
      "task": "Calculate feature importances",
      "expected_output": "Income Importance: 0.45\nCredit Score Importance: 0.35\nEmployment Years Importance: 0.20",
      "typical_answer": "importance = dict(zip(X.columns, model.feature_importances_))"
   },
   {
      "number": 19,
      "duration": 60,
      "statement": "A bank wants to automate loan approval using machine learning.",
      "task": "Generate probability predictions",
      "expected_output": "Approval Probabilities: [0.75, 0.45, 0.90]",
      "typical_answer": "probs = model.predict_proba(X_scaled)[:, 1]"
   },
   {
      "number": 20,
      "duration": 40,
      "statement": "A used car dealership wants to build a pricing model with confidence intervals.",
      "task": " First Perform train-test split",
      "expected_output": "Training set size: 80%\nTesting set size: 20%",
      "typical_answer": "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)"
   },
   {
      "number": 21,
      "duration": 50,
      "statement": "A used car dealership wants to build a pricing model with confidence intervals.",
      "task": "Second Fit random forest model",
      "expected_output": "Model Training Complete\nNumber of Estimators: 100",
      "typical_answer": "RandomForestRegressor(n_estimators=100).fit(X_train, y_train)"
   },
   {
      "number": 22,
      "duration": 40,
      "statement": "A used car dealership wants to build a pricing model with confidence intervals.",
      "task": "Extract feature importance values",
      "expected_output": "Mileage Importance: 0.4\nYear Importance: 0.35\nEngine Size Importance: 0.25",
      "typical_answer": "importance = dict(zip(X.columns, rf.feature_importances_))"
   },
   {
      "number": 23,
      "duration": 60,
      "statement": "A used car dealership wants to build a pricing model with confidence intervals.",
      "task": "Predict prices",
      "expected_output": "Predicted Price: 15000",
      "typical_answer": "preds = rf.predict(X_test)"
   },
   {
      "number": 24,
      "duration": 70,
      "statement": "A used car dealership wants to build a pricing model with confidence intervals.",
      "task": "Generate individual predictions for each decision tree in the random forest to create an ensemble of predictions",
      "expected_output": "Number of Trees: 100",
      "typical_answer": "tree_predictions = [tree.predict(X_test) for tree in rf.estimators_]"
   },
   {
      "number": 25,
      "duration": 70,
      "statement": "A used car dealership wants to build a pricing model with confidence intervals.",
      "task": "Use numpy percentile function to compute lower and upper bounds, representing the 2.5th and 97.5th percentiles of predictions to create a 95% confidence interval",
      "expected_output": "Confidence Interval: [14000, 16000]",
      "typical_answer": "intervals = np.percentile(tree_predictions, [2.5, 97.5], axis=0)"
   },
   {
      "number": 26,
      "duration": 30,
      "statement": "A classification team needs to optimize K-Nearest Neighbors model.",
      "task": "Initialize KNN classifier with specific k value",
      "expected_output": "Classifier Created: k=3",
      "typical_answer": "knn = KNeighborsClassifier(n_neighbors=3)"
   },
   {
      "number": 27,
      "duration": 50,
      "statement": "A classification team needs to optimize K-Nearest Neighbors model.",
      "task": "Calculate average cross-validation score for current k",
      "expected_output": "CV Score: 0.90",
      "typical_answer": "score = cross_val_score(knn, X, y, cv=5).mean()"
   },
   {
      "number": 28,
      "duration": 60,
      "statement": "A classification team needs to optimize K-Nearest Neighbors model.",
      "task": "Use GridSearchCV to determine best number of neighbors",
      "expected_output": "Best K: 3\nBest Score: 0.90",
      "typical_answer": "best_k = GridSearchCV(KNeighborsClassifier(), {'n_neighbors': range(1, 11)}, cv=5).fit(X, y).best_params_['n_neighbors']"
   }
]