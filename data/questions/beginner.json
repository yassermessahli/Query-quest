[
   {
       "number": 1,
       "duration": 120,
       "statement": "A data analyst at an e-commerce company needs to analyze their sales data. They have a dataset containing information about different items sold, including the item **name**, **price**, and **quantity sold**.\n| item | price | quantity |\n| --- | --- | --- |\n| A | 10 | 2 |\n| B | 20 | 3 |\n| C | 5 | 1 |",
       "task": "Create a new column 'revenue' by multiplying 'price' and 'quantity'",
       "expected_output": "item  price  quantity  revenue\nA     10     2         20\nB     20     3         60\nC      5     1          5",
       "typical_answer": "df['revenue'] = df['price'] * df['quantity']"
   },
   {
      "number": 2,
      "duration": 150,
      "statement": "A retail company wants to calculate the **total sales** for each **category** in their dataset.\n| category | sales |\n| --- | --- |\n| A | 100 |\n| A | 200 |\n| B | 150 |",
      "task": "Group and sum sales by category",
      "expected_output": "category  sales\nA         300\nB         150",
      "typical_answer": "df.groupby('category')['sales'].sum().reset_index()"
   },
   {
       "number": 3,
       "duration": 150,
       "statement": "An educational institution wants to analyze student performance data. They have collected test scores from a recent examination and need to calculate **basic statistical measures**.\n| score |\n| --- |\n| 85 |\n| 90 |\n| 75 |",
       "task": "Calculate the mean, median, and standard deviation of the scores",
       "expected_output": "mean: 83.33\nmedian: 85.0\nstd_dev: 7.64",
       "typical_answer": "stats = {\n    'mean': df['score'].mean(),\n    'median': df['score'].median(),\n    'std_dev': df['score'].std()\n}"
   },
   {
       "number": 4,
       "duration": 160,
       "statement": "A market research team needs to normalize price data for better comparison across different product categories. They have raw price data that needs to be scaled to a 0-1 range.\n| price |\n| --- |\n| 100 |\n| 200 |\n| 150 |",
       "task": "Scale the prices to a 0-1 range using MinMaxScaler",
       "expected_output": "price  price_scaled\n100    0.0\n200    1.0\n150    0.5",
       "typical_answer": "df['price_scaled'] = MinMaxScaler().fit_transform(df[['price']])"
   },
   {
       "number": 5,
       "duration": 200,
       "statement": "A real estate company wants to build a simple model to predict house prices based on house size. They have collected data on house sizes and their corresponding prices.\n| size | price |\n| --- | --- |\n| 1000 | 200000 |\n| 1500 | 300000 |\n| 2000 | 400000 |",
       "task": "Prepare the data and fit a linear regression model to predict house prices based on size",
       "expected_output": "Model coefficients:\ncoefficient: array([200.0])\nintercept: 0.0",
       "typical_answer": "model = LinearRegression()\nmodel.fit(X, y)\ncoef, intercept = model.coef_[0], model.intercept_"
   },
   {
      "number": 6,
      "duration": 60,
      "statement": "A botanist is studying iris flowers and needs to prepare the famous iris dataset for training a model.",
      "task": "Load the iris dataset",
      "expected_output": "X and y variables containing the features and the target of the dataset",
      "typical_answer": "X, y = load_iris(return_X_y=True)"
   },
   {
      "number": 7,
      "duration": 60,
      "statement": "The botanist wants the data splited into training and testing sets",
      "task": "split it into training and testing sets.",
      "expected_output": "Training and testing datasets created with an 80-20 split.",
      "typical_answer": "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)"
   },
   {
      "number": 8,
      "duration": 60,
      "statement": "The botanist wants to classify the iris flowers based on their measurements using a KNN classifier.",
      "task": "Train a KNN classifier using the training data.",
      "expected_output": "KNN model trained with the given training data.",
      "typical_answer": "KNeighborsClassifier(n_neighbors=3).fit(X_train, y_train)"
   },
   {
      "number": 9,
      "duration": 60,
      "statement": "The botanist have to evaluate the accuracy of their trained KNN classifier or he get **fired**.",
      "task": "Evaluate the model's accuracy on the test set.",
      "expected_output": "Model accuracy score:\n0.967",
      "typical_answer": "accuracy = accuracy_score(y_test, model.predict(X_test))"
   },
   {
       "number": 10,
       "duration": 140,
       "statement": "A data scientist wants to understand the relationships between different numerical variables in their dataset. They need to calculate correlations between all pairs of numeric columns.\n| A | B | C |\n| --- | --- | --- |\n| 1 | 2 | 3 |\n| 2 | 3 | 4 |\n| 3 | 4 | 5 |",
       "task": "Calculate the correlation matrix for all numeric columns",
       "expected_output": "Correlation matrix:\n      A    B    C\nA  1.00  1.00  1.00\nB  1.00  1.00  1.00\nC  1.00  1.00  1.00",
       "typical_answer": "correlation_matrix = df.select_dtypes(include=['float64', 'int64']).corr()"
   },
   {
       "number": 11,
       "duration": 150,
       "statement": "A marketing team needs to prepare their data for machine learning analysis. They have categorical data about cities that needs to be converted to a numeric format.\n| city |\n| --- |\n| NY |\n| LA |\n| NY |",
       "task": "Convert the city column to dummy variables using one-hot encoding",
       "expected_output": "city_LA  city_NY\n0        1\n1        0\n0        1",
       "typical_answer": "df_encoded = pd.get_dummies(df, columns=['city'])"
   }
]