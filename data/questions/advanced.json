[
  {
    "number": 29,
    "duration": 60,
    "statement": "A data scientist is using Ridge regression to predict coefficients for a normalized dataset with a penalty term (alpha) of 1.",
    "task": "Fit a Ridge model to find coefficients.",
    "expected_output": "coefficients: [-0.5, 0.3, 0.8]",
    "typical_answer": "Ridge(alpha=1).fit(X, y).coef_"
  },
  {
    "number": 30,
    "duration": 60,
    "statement": "A telecom company wants to identify key factors contributing to customer churn using a Random Forest classifier.",
    "task": "Find the most important feature.",
    "expected_output": "feature: 'monthly_charges'",
    "typical_answer": "X.columns[RandomForestClassifier().fit(X, y).feature_importances_.argmax()]"
  },
  {
    "number": 31,
    "duration": 60,
    "statement": "A marketing analyst needs to reduce a high-dimensional customer behavior dataset to two dimensions for visualization.",
    "task": "Perform PCA to reduce dimensionality.",
    "expected_output": "PCA results (n_samples, 2): [[1.2, -0.5], [0.8, 0.3]]",
    "typical_answer": "PCA(n_components=2).fit_transform(X)"
  },
  {
    "number": 32,
    "duration": 60,
    "statement": "A fraud detection team is analyzing transaction data to flag anomalies using Isolation Forest.",
    "task": "Identify anomalies.",
    "expected_output": "flags: [1, 1, -1, 1, -1]",
    "typical_answer": "IsolationForest(contamination=0.05).fit_predict(X)"
  },
  {
    "number": 33,
    "duration": 60,
    "statement": "A machine learning engineer is optimizing a Decision Tree classifier for customer classification and needs the best tree depth.",
    "task": "Get optimal max_depth.",
    "expected_output": "max_depth: 4",
    "typical_answer": "GridSearchCV(DecisionTreeClassifier(), {'max_depth': [2, 4, 6]}).fit(X, y).best_params_['max_depth']"
  },
  {
    "number": 34,
    "duration": 60,
    "statement": "A data analyst is building a housing price prediction model and wants to include polynomial features to capture non-linear relationships.",
    "task": "Generate polynomial features.",
    "expected_output": "polynomial_features:\n[[1.0, 2.0, 8.0],\n[2.0, 4.0, 16.0]]",
    "typical_answer": "PolynomialFeatures(degree=3).fit_transform(X)"
  },
  {
    "number": 35,
    "duration": 60,
    "statement": "A data scientist wants to ensure the robustness of a Logistic Regression model by evaluating its performance with cross-validation.",
    "task": "Get mean accuracy.",
    "expected_output": "accuracy: 0.85",
    "typical_answer": "cross_val_score(LogisticRegression(), X, y, cv=5).mean()"
  },
  {
    "number": 36,
    "duration": 60,
    "statement": "A marketing team is evaluating the quality of customer segmentation performed using K-Means clustering.",
    "task": "Get silhouette score.",
    "expected_output": "silhouette_score: 0.68",
    "typical_answer": "silhouette_score(X, KMeans(n_clusters=3).fit_predict(X))"
  },
  {
    "number": 37,
    "duration": 60,
    "statement": "A healthcare team wants to evaluate the performance of a disease prediction model using a confusion matrix.",
    "task": "Compute confusion matrix.",
    "expected_output": "confusion_matrix:\n[[45, 5], [3, 47]]",
    "typical_answer": "confusion_matrix(y_true, y_pred)"
  },
  {
    "number": 38,
    "duration": 60,
    "statement": "A data scientist is building a reusable pipeline that standardizes features and trains an SVM classifier.",
    "task": "Build and train pipeline.",
    "expected_output": "pipeline: fitted_pipeline",
    "typical_answer": "make_pipeline(StandardScaler(), SVC()).fit(X, y)"
  }
]